#!/bin/bash

delete_local=false
delete_remote=false
dry_run=false

help ()
{
    echo "usage: $0 [options]"
    echo ""
    echo "[options]"
    echo "  -h          show this help"
    echo "  -r          delete remote branch"
    echo "  -l          delete local branch"
    echo "  -n          dry-run mode, to see what branches will be removed"
    exit 0
}

while getopts "hrln" opt; do
    case $opt in
        h)
            help
            ;;
        r)
            delete_remote=true
            ;;
        l)
            delete_local=true
            ;;
        n)
            dry_run=true
            ;;
        :)
            exit 1
            ;;
    esac
done


if ! $delete_local && ! $delete_remote;
then
    echo -e "\e[00;31mWell, no specify -r or -l, quit\e[0m"
    exit 1
fi

if $dry_run ;
then
    echo -e "\e[00;31mRunning in dry-run mode...\e[0m"
fi

touch_branches_message=""
if $delete_local;
then
    touch_branches_message="local, "
fi

if $delete_remote ;
then
    touch_branches_message=$touch_branches_message"remote"
fi

echo -e "\e[01;34mDelete mreged branches: \e[01;36m${touch_branches_message}\e[0m"

################################################################
#
# Update
#
################################################################

remote_feature_branch_prefix="remotes/origin/feature/"
local_feature_branch_prefix="feature/"
remote_bugfix_branch_prefix="remotes/origin/bugfix/"
local_bugfix_branch_prefix="bugfix/"

declare -a remote_merged_branches
declare -a local_merged_branches

current_branch=`git branch|grep "*"|sed s/^*//`

echo -e "\e[01;34mBase on current local branch:\e[00m \e[00;32m$current_branch\e[0m"
echo -e "\e[01;34mUpdate current branch to date and prune deleted remote branches...\e[0m"

git fetch -p && git pull origin $current_branch
if [ $? != 0 ]; 
then
    echo -e "\e[01;31m... Fail to update!\e[0m"
    exit 1
fi

################################################################
#
# Find merged remote & local branches
#
################################################################

echo -e "\e[01;34mFind already merged branches...\e[0m"

i=0
j=0

for k in $(git branch -a --merged|grep -v "\->"|sed s/^..//);
do 
    if `echo ${k} | grep -E "^${remote_feature_branch_prefix}|^${remote_bugfix_branch_prefix}" 1>/dev/null 2>&1`
    then
        remote_merged_branches[i++]=`echo ${k} | sed -e "s/^remotes\/origin\///"`
    fi

    if `echo ${k} | grep -E "^${local_feature_branch_prefix}|^${local_bugfix_branch_prefix}" 1>/dev/null 2>&1`
    then
        local_merged_branches[j++]=${k}
    fi
done

################################################################
#
# Delete remote & local branches
#
################################################################


if $delete_remote ;
then
    echo -e "\e[01;34mDelete remote branches...\e[0m"
    for branch in ${remote_merged_branches[@]}; 
    do
        if $dry_run ;
        then
            echo "Delete: $branch"
        else
            git push origin :$branch
        fi
    done
fi

if $delete_local ;
then
    echo -e "\e[01;34mDelete local branches...\e[0m"
    for branch in ${local_merged_branches[@]}; 
    do
        if $dry_run ;
        then
            echo "Delete: $branch"
        else
            git branch -d $branch
        fi
    done
fi
